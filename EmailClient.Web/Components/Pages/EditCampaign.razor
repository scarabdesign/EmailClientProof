@page "/editcampaign/{CurrentCampaignId:int}"

@inject ServiceSocket ServiceSocket
@inject EmailApiClient EmailApi
@inject IConfiguration Configuration
@inject NavigationManager Navigation

@using System.Text.Json
@using EmailClient.ApiService
@using System.ComponentModel.DataAnnotations
@using static EmailClient.ApiService.Dto
@using TinyMCE.Blazor

@implements IDisposable

@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

<style>
    .valid.modified:not([type=checkbox]) {
        outline: 1px solid #26b050;
    }

    .invalid {
        outline: 1px solid red;
    }

    .validation-message {
        color: red;
    }
</style>

<Modal @ref="warning" Title="@WarningTitle" Id="WarningModel">
    <BodyTemplate>
        @WarningMessage
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="@HideWarning">Ok</Button>
    </FooterTemplate>
</Modal>

<NavigationLock ConfirmExternalNavigation="@CampaignUnsaved"
                OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
<ConfirmDialog @ref="confirm" />

<div>
    <Breadcrumb Items="Breadcrumb"></Breadcrumb>
</div>

@if (CurrentCampaign == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm EditContext="@editContext" FormName="EditCampaign">
        <DataAnnotationsValidator />
        <div class="row">
            <p class="col-md-8 d-flex align-items-center">
                <h1>@(!NewCampaign ? "Edit Campaign" : "Add Campaign")</h1>
            </p>
            <div class="col-md-4 d-flex align-items-center">
                <Button @onclick=@HandleOnValidSubmit Color="ButtonColor.Success" Outline="@(CampaignUnsaved ? false : true)" Class="float-end me-2">Save Campaign @(CampaignUnsaved ? "*" : "")</Button>
                <Button @onclick=@ToggleCampaignPause Color="@(CurrentCampaign.State == CampaignState.Running ? ButtonColor.Warning : ButtonColor.Success)" Class="me-2" Disabled=@(CurrentCampaignId == 0) >
                    <Icon Name="@(CurrentCampaign.State == CampaignState.Running ? IconName.Pause : IconName.Play)" />@(CurrentCampaign.State == CampaignState.Running ? "Pause" : "Run")
                </Button>
                @if (!NewCampaign)
                {
                    <Button Color="ButtonColor.Success" Class="me-2" @onclick=@AddRecipients>Manage Recipients</Button>
                }
            </div>
        </div>
        <div class="form-group row mb-3">
            <div class="row">
                <div class="col-md-2 text-end">Campaign ID:</div>
                <div class="col-md-2">@(CurrentCampaign.Id > 0 ? CurrentCampaign.Id : "New")</div>
            </div>
        </div>

        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label text-end">Campaign Title: <span class="text-danger">*</span></label>
            <div class="col-md-10">
                <TextInput @bind-Value="@CurrentCampaign.Name" Placeholder="Enter Title" />
                <ValidationMessage For="@(() => CurrentCampaign.Name)" />
            </div>
        </div>

        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label text-end">Sender Address: <span class="text-danger">*</span></label>
            <div class="col-md-10">
                <TextInput @bind-Value="@CurrentCampaign.Sender" Placeholder="Enter Sender" />
                <ValidationMessage For="@(() => CurrentCampaign.Sender)" />
            </div>
        </div>

        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label text-end">Email Subject: <span class="text-danger">*</span></label>
            <div class="col-md-10">
                <TextInput @bind-Value="@CurrentCampaign.Subject" Placeholder="Enter Subject" />
                <ValidationMessage For="@(() => CurrentCampaign.Subject)" />
            </div>
        </div>

        <div class="form-group row mb-3">
            <div class="col-md-2 col-form-label text-end">
                <label>Email Body: <span class="text-danger">*</span></label>
                <br />
                <br />
                <Button @onclick=@LoremIpsum Outline=true Color="ButtonColor.Secondary">Lorem Ipsum</Button>
            </div>            
            <div class="col-md-10">
                <Editor @ref="editor"
                @bind-Value="@CurrentCampaign.Body"
                Field="@(() => CurrentCampaign.Body)"
                ApiKey="@Configuration["TinyMCEApiKey"]" />
                <ValidationMessage For="@(() => CurrentCampaign.Body)" />
            </div>
        </div>

        <div class="form-group row mb-3">
            @if (!NewCampaign)
            {
                <div class="row">
                    <div class="col-md-2 text-end">Created:</div>
                    <div class="col-md-10">@CurrentCampaign.Created.ToShortDateString() : @CurrentCampaign.Created.ToShortTimeString()</div>
                </div>
                <div class="row">
                    <div class="col-md-2 text-end">Updated:</div>
                    <div class="col-md-10">@CurrentCampaign.Updated.ToShortDateString() : @CurrentCampaign.Updated.ToShortTimeString()</div>
                </div>
            }
            <div class="row">
                <div class="col-md-2 text-end">Recipient Count:</div>
                <div class="col-md-10">@CurrentCampaign?.EmailCount</div>
            </div>
        </div>
    </EditForm>
}

@code {

    [Parameter]
    public int CurrentCampaignId { get; set; }

    [SupplyParameterFromForm]
    private CampaignDto? CurrentCampaign { get; set; }

    private EditContext editContext = default!;
    private Modal warning = default!;
    private string WarningTitle = string.Empty;
    private string WarningMessage = string.Empty;
    private List<BreadcrumbItem> Breadcrumb = new();
    public bool NewCampaign => CurrentCampaignId <= 0;
    private string CampaignUpdated = "CampaignUpdated";
    private bool CampaignUnsaved = false;
    private string newRecipients = string.Empty;
    private ConfirmDialog confirm = default!;
    private Editor editor = default!;
    private JsonSerializerOptions jOpts = new()
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

    protected override async Task OnInitializedAsync()
    {
        Breadcrumb.Add(new BreadcrumbItem { Text = "Campaigns", Href = "/campaigns" });
        if (NewCampaign)
        {
            Breadcrumb.Add(new BreadcrumbItem { Text = "New Campaign", IsCurrentPage = true });
            CurrentCampaign = new()
                {
                    Body = string.Empty,
                    Name = string.Empty,
                    Sender = string.Empty,
                    Subject = string.Empty,
                };
        }
        else
        {
            Breadcrumb.Add(new BreadcrumbItem { Text = "Edit Campaign", IsCurrentPage = true });
            CurrentCampaign = await EmailApi.GetCampaign(CurrentCampaignId);
        }
        if (CurrentCampaign != null)
        {
            editContext = new EditContext(CurrentCampaign);
            editContext.OnFieldChanged -= FieldEdited;
            editContext.OnFieldChanged += FieldEdited;
        }

        ServiceSocket.OnMessageReceived -= RefreshData;
        ServiceSocket.OnMessageReceived += RefreshData;
        ServiceSocket.Subscribe(CampaignUpdated);
    }

    private void LoremIpsum()
    {
        if (CurrentCampaign != null)
        {
            CurrentCampaign.Body +=
                "Lorem ipsum dolor sit amet consectetur adipiscing elit. Quisque faucibus ex sapien vitae pellentesque sem placerat. In id cursus mi pretium tellus duis convallis. Tempus leo eu aenean sed diam urna tempor. Pulvinar vivamus fringilla lacus nec metus bibendum egestas. Iaculis massa nisl malesuada lacinia integer nunc posuere. Ut hendrerit semper vel class aptent taciti sociosqu. Ad litora torquent per conubia nostra inceptos himenaeos.";
            CampaignUnsaved = true;
            editContext.MarkAsUnmodified();
            StateHasChanged();
        }
    }

    public void FieldEdited(object? sender, FieldChangedEventArgs eventArgs)
    {
        CampaignUnsaved = editContext.IsModified();
    }

    private async void RefreshData(string subType, string? status = null)
    {
        if (subType == CampaignUpdated && status != null && !NewCampaign)
        {
            var statusObj = JsonSerializer.Deserialize<StatusDto>(status, jOpts);
            if (statusObj != null)
            {
                if (statusObj.CurrentlyViewing != null)
                {
                    CurrentCampaign = statusObj.CurrentlyViewing;
                    CurrentCampaignId = CurrentCampaign.Id;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    private async Task<bool> HandleOnValidSubmit()
    {
        if (CurrentCampaign == null)
        {
            return false;
        }

        if (ValidateForm())
        {
            if (NewCampaign)
            {
                await EmailApi.AddCampaign(CurrentCampaign);
            }
            else
            {
                await EmailApi.UpdateCampaign(CurrentCampaign);
            }
            editContext.MarkAsUnmodified();
            CampaignUnsaved = false;
            return true;
        }

        ShowWarning("Problem with fields", "Some fields are missing values. Please return and fill in all required fields");
        return false;
    }


    private async Task<bool> ConfirmClose()
    {
        return await confirm.ShowAsync(
            title: "Close Window?",
            message1: "You have unsaved changes to this campaign.",
            message2: "Close and lose changes?",
            new ConfirmDialogOptions
                {
                    YesButtonText = "Yes, Close",
                    NoButtonText = "Cancel and Return"
                }
        );
    }

    private async void ToggleCampaignPause()
    {
        if (await VerifiChanged() && !NewCampaign)
        {
            await EmailApi.ToggleCampaignPause(CurrentCampaignId);
        }
    }

    private bool ValidateForm()
    {
        if (!editContext.Validate())
        {
            return false;
        }

        if (CurrentCampaign == null)
        {
            return false;
        }

        if (string.IsNullOrWhiteSpace(CurrentCampaign.Name))
        {
            return false;
        }

        if (string.IsNullOrWhiteSpace(CurrentCampaign.Sender))
        {
            return false;
        }

        if (string.IsNullOrWhiteSpace(CurrentCampaign.Subject))
        {
            return false;
        }

        if (string.IsNullOrWhiteSpace(CurrentCampaign.Body))
        {
            return false;
        }
        return true;
    }

    private async void ShowWarning(string title, string message)
    {
        WarningTitle = title;
        WarningMessage = message;
        await warning.ShowAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async void HideWarning()
    {
        await warning.HideAsync();
        WarningTitle = string.Empty;
        WarningMessage = string.Empty;
        await InvokeAsync(StateHasChanged);
    }

    private async Task<bool> VerifiChanged()
    {
        if (editContext.IsModified())
        {
            if (!await confirm.ShowAsync(
                title: "Unsaved changes",
                message1: "You have modified the email campaign.",
                message2: "Click continue to save before sending or cancel to go back.",
                new ConfirmDialogOptions
                    {
                        YesButtonText = "Save and Continue",
                        NoButtonText = "Cancel"
                    }
            ))
            {
                return false;
            }

            if (!await HandleOnValidSubmit())
            {
                return false;
            }
        }
        return true;
    }

    private async void AddRecipients()
    {
        if (await VerifiChanged() && !NewCampaign)
        {
            Navigation.NavigateTo("/manageRecipients/" + CurrentCampaignId);
        }
    }


    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        if (CampaignUnsaved && !await ConfirmClose())
        {
            context.PreventNavigation();
        }
    }

    void IDisposable.Dispose()
    {
        ServiceSocket.OnMessageReceived -= RefreshData;
        editContext.OnFieldChanged -= FieldEdited;
    }
}