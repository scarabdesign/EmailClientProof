@page "/editcompaign"
@page "/editcompaign/{CurrentCampaignId:int}"
@rendermode InteractiveServer

@inject EmailApiClient EmailApi
@inject ServiceSocket ServiceSocket

@using System.Text.Json
@using EmailClient.ApiService
@using System.ComponentModel.DataAnnotations
@using static EmailClient.ApiService.Dto

@implements IAsyncDisposable

@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

<style>
    .valid.modified:not([type=checkbox]) {
    outline: 1px solid #26b050;
    }

    .invalid {
    outline: 1px solid red;
    }

    .validation-message {
    color: red;
    }
</style>

@if (CurrentCampaign == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm EditContext="@editContext" OnValidSubmit="HandleOnValidSubmit" FormName="EditCampaign">
        <DataAnnotationsValidator />
        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label">Campaign Title: <span class="text-danger">*</span></label>
            <div class="col-md-10">
                <TextInput @bind-Value="@CurrentCampaign.Name" Placeholder="Enter first name" />
                <ValidationMessage For="@(() => CurrentCampaign.Name)" />
            </div>
        </div>

        <div class="form-group row mb-3">
            <label class="col-md-2 col-form-label">Last Name: <span class="text-danger">*</span></label>
            <div class="col-md-10">
                <TextInput @bind-Value="@CurrentCampaign.Subject" Placeholder="Enter last name" />
                <ValidationMessage For="@(() => CurrentCampaign.Subject)" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-12 text-right">
                <Button Type="ButtonType.Submit" Color="ButtonColor.Success" Class="float-end me-2">Submit</Button>
            </div>
        </div>

    </EditForm>

    @if (SavedChanges && !editContext.IsModified())
    {
        <p class="alert alert-success">Changes saved successfully.</p>
    }

    <NavigationLock 
    ConfirmExternalNavigation="@editContext.IsModified()" 
    />

    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Status</th>
                <th aria-label="Number of attempts">Attempts</th>
                <th aria-label="First attempt date/time">First Attempt</th>
                <th aria-label="Last attempt date/time">Last Attempt</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var attempt in EmailAttempts)
            {
                <tr>
                    <td>@attempt.Email</td>
                    <td>@attempt.Status.ToString()</td>
                    <td>@attempt.Attempts.ToString()</td>
                    <td>@attempt.Created.ToShortDateString() : @attempt.Created.ToShortTimeString()</td>
                    <td>@(attempt.LastAttempt != null ? attempt.LastAttempt?.ToShortDateString() + " : " + attempt.LastAttempt?.ToShortTimeString() : "")</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [SupplyParameterFromForm]
    private CampaignDto? CurrentCampaign { get; set; }

    private EditContext editContext = default!;

    private List<EmailAttemptDto>? EmailAttempts = new();

    private bool SavedChanges = false;

    private string SubType = "AttemptsUpdated";

    [Parameter]
    public int CurrentCampaignId { get; set; }

    private JsonSerializerOptions jOpts = new()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
    };

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        if (CurrentCampaignId == 0)
        {
            CurrentCampaign = new()
            {
                Body = string.Empty,
                Name = string.Empty,
                Sender = string.Empty,
                Subject = string.Empty,
            };
        }
        else
        {
            CurrentCampaign = await EmailApi.GetCampaign(CurrentCampaignId);
        }
        if (CurrentCampaign != null)
        {
            EmailAttempts = CurrentCampaign.EmailAttempts;
            editContext = new EditContext(CurrentCampaign);
        }
        
        ServiceSocket.MessageReceived += RefreshData;
        ServiceSocket.Subscribe(SubType);
    }

    private async void RefreshData(string subType, string? status = null)
    {
        if (subType == SubType && status != null)
        {
            var statusObj = JsonSerializer.Deserialize<StatusDto>(status, jOpts);
            if (statusObj != null)
            {
                if (statusObj.CurrentlyViewing != null)
                {
                    CurrentCampaign = statusObj.CurrentlyViewing;
                    EmailAttempts = CurrentCampaign.EmailAttempts;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    public void HandleOnValidSubmit()
    {
        // additional check
        if (editContext?.Validate() ?? false)
        {
            // do something
            // submit the form
            Console.WriteLine("Form submitted successfully");
        }
    }

    public async ValueTask DisposeAsync()
    {
        ServiceSocket.MessageReceived -= RefreshData;
    }
}