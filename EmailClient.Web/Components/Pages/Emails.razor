@page "/email"
@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject EmailApiClient EmailApi
@inject IHttpMessageHandlerFactory HttpMessageHandlerFactory

@using System.Text.Json;

@using EmailClient.ApiService
@using Microsoft.AspNetCore.SignalR.Client
@using static EmailClient.Web.EmailApiClient

@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

<PageTitle>Email Client</PageTitle>

<h1>Email Attempts</h1>

@if (emailAttempts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="RefreshData">Click me</button>
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Status</th>
                <th aria-label="Number of attempts">Attempts</th>
                <th aria-label="First attempt date/time">First Attempt</th>
                <th aria-label="Last attempt date/time">Last Attempt</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var attempt in emailAttempts)
            {
                <tr>
                    <td>@attempt.Email</td>
                    <td>@attempt.Status.ToString()</td>
                    <td>@attempt.Attempts.ToString()</td>
                    <td>@attempt.Created.ToShortDateString() : @attempt.Created.ToShortTimeString()</td>
                    <td>@(attempt.LastAttempt != null ? attempt.LastAttempt?.ToShortDateString() + " : " + attempt.LastAttempt?.ToShortTimeString() : "")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private void RefreshData() => RefreshData(null);

    private List<EmailAttempt>? emailAttempts;
    private HubConnection? hubConnection;

    private JsonSerializerOptions jOpts = new()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
    };

    private async void WsConnect()
    {
        //Initialize SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://apiservice/clientHub", HttpMessageHandlerFactory)
            .Build();

        hubConnection.On<string>("ReceiveUpdate", async (message) =>
        {
            await InvokeAsync(() => RefreshData(message));
        });

        await hubConnection.StartAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        emailAttempts = await EmailApi.GetAllAttempts();
        WsConnect();
    }

    private void RefreshData(string? newAttempts = null)
    {
        if (newAttempts != null)
        {
            emailAttempts = JsonSerializer.Deserialize<List<EmailAttempt>>(newAttempts, jOpts);
        }
        //emailAttempts = await EmailApi.GetAllAttempts();
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}