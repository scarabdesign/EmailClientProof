@page "/"
@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject EmailApiClient EmailApi
@inject ServiceSocket ServiceSocket

@using System.Text.Json;
@using EmailClient.ApiService
@using static EmailClient.ApiService.Dto

@implements IAsyncDisposable

@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

<PageTitle>Email Client</PageTitle>

<h1>Email Campaigns</h1>

@if (CampaignList == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Name</th>
                <th>Subject</th>
                <th>Sender</th>
                <th aria-label="Number of emails in campaign">Count</th>
                <th aria-label="Date/time of last update">Updated</th>
                <th aria-label="Date/time of creation">Create</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var campaign in CampaignList)
            {
                <tr>
                    <td>
                        <button aria-label="Edit Campaign" class="btn btn-primary" @onclick=@(() => EditCampaign(campaign.Id))>✎</button>
                    </td>
                    <td>@campaign.Name</td>
                    <td>@campaign.Subject</td>
                    <td>@campaign.Sender</td>
                    <td>@campaign.EmailCount</td>
                    <td>@campaign.Updated.ToShortDateString() : @campaign.Updated.ToShortTimeString()</td>
                    <td>@campaign.Created.ToShortDateString() : @campaign.Created.ToShortTimeString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string SubType = "CampaignsUpdated";
    private List<EmailClient.ApiService.Dto.CampaignDto>? CampaignList;
    private JsonSerializerOptions jOpts = new()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
    };

    private void EditCampaign(int id)
    {
        Navigation.NavigateTo($"editcompaign/{id}");
    }

    protected override async Task OnInitializedAsync()
    {
        CampaignList = await EmailApi.GetAllCampaigns();
        ServiceSocket.MessageReceived += RefreshData;
        ServiceSocket.Subscribe(SubType);
    }

    private void RefreshData(string subType, string? status = null)
    {
        if (subType == SubType && status != null)
        {
            var statusObj = JsonSerializer.Deserialize<StatusDto>(status, jOpts);
            if (statusObj != null)
            {
                if (statusObj.Campaigns != null)
                {
                    CampaignList = statusObj.Campaigns;
                    InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        ServiceSocket.MessageReceived -= RefreshData;
    }
}