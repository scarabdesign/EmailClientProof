@page "/"
@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject EmailApiClient EmailApi
@inject ServiceSocket ServiceSocket

@using System.Text.Json;
@using EmailClient.ApiService
@using static EmailClient.ApiService.Dto

@implements IDisposable

@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

<PageTitle>Email Client</PageTitle>

<h1>Email Campaigns</h1>


<NavigationLock ConfirmExternalNavigation="@CampaignUnsaved"
                OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<ConfirmDialog @ref="confirm" />

<Modal @ref="modal"
       ShowCloseButton="false"
       CloseOnEscape="false"
       UseStaticBackdrop="true"
       Id="CampaignEditor">
    <HeaderTemplate>
        <h5 class="modal-title">
            @ModalTitle
            @if (CampaignUnsaved)
            {
                <span class="text-danger"> *</span>
            }
        </h5>
        <Button Class="bi bi-x-lg float-end" @onclick=@CloseModal />
    </HeaderTemplate>
</Modal>

@if (CampaignList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Button Color="ButtonColor.Primary" @onclick=@AddCampaign>+ New Campaign</Button>
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Name</th>
                <th>Subject</th>
                <th>Sender</th>
                <th aria-label="Number of emails in campaign">Count</th>
                <th aria-label="Date/time of last update">Updated</th>
                <th aria-label="Date/time of creation">Create</th>
            </tr>
        </thead>
        <tbody>
            @if (CampaignList.Count == 0)
            {
                <tr>
                    <td colspan="7" class="text-center">
                        No Email Campaigns to list: <Button Color="ButtonColor.Primary" @onclick=@AddCampaign>+</Button>
                    </td>
                </tr>
            }
            @foreach (var campaign in CampaignList)
            {
                <tr>
                    <td>
                        <button aria-label="Edit Campaign" class="btn btn-primary" @onclick=@(() => EditCampaign(campaign.Id))>✎</button>
                    </td>
                    <td>@campaign.Name</td>
                    <td>@campaign.Subject</td>
                    <td>@campaign.Sender</td>
                    <td>@campaign.EmailCount</td>
                    <td>@campaign.Updated.ToShortDateString() : @campaign.Updated.ToShortTimeString()</td>
                    <td>@campaign.Created.ToShortDateString() : @campaign.Created.ToShortTimeString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string ModalTitle = string.Empty;
    private string CampaignsUpdated = "CampaignsUpdated";
    private List<EmailClient.ApiService.Dto.CampaignDto>? CampaignList;
    private bool CampaignUnsaved = false;
    private JsonSerializerOptions jOpts = new()
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

    private Modal modal = default!;
    private ConfirmDialog confirm = default!;

    private async void AddCampaign()
    {
        ModalTitle = "Add Campaign";
        await ShowCampaignModal(new()
        {
            { "NewCampaign", true }
        });
    }

    private async void EditCampaign(int id)
    {
        ModalTitle = "Edit Campaign";
        await ShowCampaignModal(new()
        {
            { "CurrentCampaignId", id }
        });
    }

    private async Task ShowCampaignModal(Dictionary<string, object> parameters)
    {
        parameters.Add("CurrentCampaignUnsaved", EventCallback.Factory.Create<bool>(this, CurrentCampaignUnsaved));
        await modal.ShowAsync<EditCampaign>(title: string.Empty, parameters: parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        CampaignList = await EmailApi.GetAllCampaigns();
        ServiceSocket.MessageReceived += RefreshData;
        ServiceSocket.Subscribe(CampaignsUpdated);
    }

    private async void CloseModal()
    {
        if (CampaignUnsaved && !(await ConfirmClose()))
        {
            return;
        }
        await modal.HideAsync();
        CampaignUnsaved = false;
        ModalTitle = string.Empty;
        await InvokeAsync(StateHasChanged);
    }

    private void CurrentCampaignUnsaved(bool unsaved)
    {
        CampaignUnsaved = unsaved;
        if (!unsaved)
        {
            ModalTitle = "Edit Campaign";
        }
    }

    private void RefreshData(string subType, string? status = null)
    {
        if (subType == CampaignsUpdated && status != null)
        {
            var statusObj = JsonSerializer.Deserialize<StatusDto>(status, jOpts);
            if (statusObj != null)
            {
                if (statusObj.Campaigns != null)
                {
                    CampaignList = statusObj.Campaigns;
                    InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    private async Task<bool> ConfirmClose()
    {
        return await confirm.ShowAsync(
            title: "Close Window?",
            message1: "You have unsaved changes to this campaign.",
            message2: "Close and lose changes?",
            new ConfirmDialogOptions
            {
                YesButtonText = "Yes, Close",
                NoButtonText = "Cancel and Return"
            }
        );
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        if (CampaignUnsaved && !await ConfirmClose())
        {
            context.PreventNavigation();
        }
    }

    public void Dispose()
    {
        ServiceSocket.MessageReceived -= RefreshData;
    }

}